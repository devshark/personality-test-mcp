name: personality-test-mcp
description: A Model Context Protocol (MCP) implementation for personality testing with Ollama integration
version: 0.1.0
author: Model Context Protocols Contributors
license: ISC

startCommand: python server/app.py
configSchema:
  type: object
  properties:
    port:
      type: integer
      description: Port to run the server on
      default: 8000
    debug:
      type: boolean
      description: Whether to run in debug mode
      default: false
    ollama_url:
      type: string
      description: URL for Ollama API
      default: http://localhost:11434
    ollama_model:
      type: string
      description: Default Ollama model to use
      default: llama3

commandFunction: |
  async function command(config, context) {
    const { port, debug, ollama_url, ollama_model } = config;
    
    // Start the server
    if (context.command === 'start-server') {
      return {
        command: `python server/app.py --port ${port} ${debug ? '--debug' : ''}`,
        description: `Starting personality test MCP server on port ${port}`
      };
    }
    
    // Run the client
    if (context.command === 'run-client') {
      return {
        command: `python client/mcp_client.py --server http://localhost:${port}`,
        description: 'Starting personality test MCP client'
      };
    }
    
    // Run with Ollama integration
    if (context.command === 'run-ollama') {
      return {
        command: `python client/ollama_integration.py --ollama ${ollama_url} --model ${ollama_model}`,
        description: `Starting personality test with Ollama integration using model ${ollama_model}`
      };
    }
    
    // Run tests
    if (context.command === 'test') {
      return {
        command: 'pytest',
        description: 'Running tests for personality test MCP'
      };
    }
    
    return {
      command: './run_demo.sh',
      description: 'Running personality test MCP demo'
    };
  }

files:
  - path: server/app.py
    description: FastAPI server implementation for personality test MCP
    
  - path: client/mcp_client.py
    description: Client for interacting with the personality test MCP server
    
  - path: client/ollama_integration.py
    description: Integration with Ollama for personalized AI interactions
    
  - path: requirements.txt
    description: Python dependencies for the project
    
  - path: run_demo.sh
    description: Shell script to run the demo
    
  - path: Dockerfile
    description: Docker configuration for containerized deployment
    
  - path: README.md
    description: Project documentation
    
  - path: LICENSE
    description: ISC license file

dependencies:
  - fastapi==0.104.1
  - uvicorn==0.24.0
  - requests==2.31.0
  - pydantic==2.4.2
  - uuid==1.30

endpoints:
  - path: /mcp
    method: POST
    description: Main MCP endpoint for personality test interactions
    request:
      contentType: application/json
      schema:
        type: object
        properties:
          query:
            type: string
            description: The user's query or command
          context:
            type: object
            description: Context information for the session
    response:
      contentType: application/json
      schema:
        type: object
        properties:
          response:
            type: string
            description: The response text to show to the user
          context:
            type: object
            description: Updated context information
            
  - path: /health
    method: GET
    description: Health check endpoint
    response:
      contentType: application/json
      schema:
        type: object
        properties:
          status:
            type: string
            description: Health status of the service

models:
  - name: PersonalityQuestion
    properties:
      id:
        type: string
        description: Unique identifier for the question
      question:
        type: string
        description: The question text
      dimension:
        type: string
        description: The personality dimension this question measures
        
  - name: PersonalityType
    properties:
      code:
        type: string
        description: Four-letter code for the personality type
      description:
        type: string
        description: Description of the personality type
        
  - name: TestSession
    properties:
      session_id:
        type: string
        description: Unique identifier for the test session
      current_question:
        type: integer
        description: Current question number
      answers:
        type: object
        description: User's answers to questions
      completed:
        type: boolean
        description: Whether the test is completed
      personality_type:
        type: string
        description: The determined personality type
